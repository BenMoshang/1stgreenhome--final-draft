@use '../base/globals' as globals;

// Define line height from typography system
$line-height: globals.$MAJOR-HALF;

// Mixin: compute CSS vars for margins based on a given line-height
@mixin adjust-to($line-height) {
  @if not unitless($line-height) {
    @error '#{$line-height} is not dimensionless';
  }
  --margin-2xs: #{globals.round-to(1em * $line-height * globals.$MINOR-QUARTER)};
  --margin-xs: #{globals.round-to(1em * $line-height * globals.$MINOR-HALF)};
  --margin-sm: #{globals.round-to(1em * $line-height * globals.$MINOR)};
  --margin-md: #{globals.round-to($line-height * globals.size('md'))};
  --margin-lg: #{globals.round-to($line-height * globals.size('lg'))};
  --margin-xl: #{globals.round-to($line-height * globals.size('xl'))};
  --margin-2xl: #{globals.round-to($line-height * globals.size('2xl'))};
}

// Base: compute CSS vars at root using default typography line-height
:root {
  @include adjust-to(globals.$MAJOR-HALF);
}

// Margin utilities
@each $size in ('2xs', 'xs', 'sm', 'md', 'lg', 'xl', '2xl') {
  .u_m-top__#{$size} {
    margin-block-start: var(--margin-#{$size});
  }
  
  .u_m-right__#{$size} {
    margin-inline-end: var(--margin-#{$size});
  }
  
  .u_m-bottom__#{$size} {
    margin-block-end: var(--margin-#{$size});
  }
  
  .u_m-left__#{$size} {
    margin-inline-start: var(--margin-#{$size});
  }
  
  .u_m-block__#{$size} {
    margin-block: var(--margin-#{$size});
  }
  
  .u_m-inline__#{$size} {
    margin-inline: var(--margin-#{$size});
  }
}
