@use '../base/globals' as globals;

// Define line height from typography system
$line-height: globals.$MAJOR-HALF;

:root {
  // Harmonized line-height-adjustment scale based on typography metrics
  --line-height-adjustment-2xs: #{globals.round-to(1em * $line-height * globals.$MINOR-QUARTER)};
  --line-height-adjustment-xs: #{globals.round-to(1em * $line-height * globals.$MINOR-HALF)};
  --line-height-adjustment-sm: #{globals.round-to(1em * $line-height * globals.$MINOR)};
  --line-height-adjustment-md: #{globals.round-to($line-height * globals.size('md'))};
  --line-height-adjustment-lg: #{globals.round-to($line-height * globals.size('lg'))};
  --line-height-adjustment-xl: #{globals.round-to($line-height * globals.size('xl'))};
  --line-height-adjustment-2xl: #{globals.round-to($line-height * globals.size('2xl'))};
}

// Helper function to get line-height-adjustment variable value
@function line-height-adjustment($key) {
  @if $key == '2xs' {
    @return var(--line-height-adjustment-2xs);
  } @else if $key == 'xs' {
    @return var(--line-height-adjustment-xs);
  } @else if $key == 'sm' {
    @return var(--line-height-adjustment-sm);
  } @else if $key == 'md' {
    @return var(--line-height-adjustment-md);
  } @else if $key == 'lg' {
    @return var(--line-height-adjustment-lg);
  } @else if $key == 'xl' {
    @return var(--line-height-adjustment-xl);
  } @else if $key == '2xl' {
    @return var(--line-height-adjustment-2xl);
  } @else {
    @error "Unknown line-height-adjustment key: #{$key}";
    @return 0;
  }
}

@mixin adjust-to($line-height) {
  @if not unitless($line-height) {
    @error '#{$line-height} is not dimensionless';
  }
  
  // Updated to use the centralized line-height-adjustment variable names
  // while keeping the calculation logic for backward compatibility
  --line-height-adjustment-2xs: #{globals.round-to(1em * $line-height * globals.$MINOR-QUARTER)};
  --line-height-adjustment-xs: #{globals.round-to(1em * $line-height * globals.$MINOR-HALF)};
  --line-height-adjustment-sm: #{globals.round-to(1em * $line-height * globals.$MINOR)};
  --line-height-adjustment-md: #{globals.round-to($line-height * globals.size('md'))};
  --line-height-adjustment-lg: #{globals.round-to($line-height * globals.size('lg'))};
  --line-height-adjustment-xl: #{globals.round-to($line-height * globals.size('xl'))};
  --line-height-adjustment-2xl: #{globals.round-to($line-height * globals.size('2xl'))};
}

// line-height-adjustment sizes
$line-height-adjustment-sizes: (
  '2xs': size('2xs'),
  'xs': size('xs'),
  'sm': size('sm'),
  'md': size('md'),
  'lg': size('lg'),
  'xl': size('xl'),
  '2xl': size('2xl')
);

// Margin utilities
@each $size, $value in $line-height-adjustment-sizes {
  .u_m-top__#{$size} {
    margin-block-start: $value;
  }
  
  .u_m-right__#{$size} {
    margin-inline-end: $value;
  }
  
  .u_m-bottom__#{$size} {
    margin-block-end: $value;
  }
  
  .u_m-left__#{$size} {
    margin-inline-start: $value;
  }
  
  .u_m-block__#{$size} {
    margin-block: $value;
  }
  
  .u_m-inline__#{$size} {
    margin-inline: $value;
  }
}

// Padding utilities
@each $size, $value in $line-height-adjustment-sizes {
  .u_p-top__#{$size} {
    padding-block-start: $value;
  }
  
  .u_p-right__#{$size} {
    padding-inline-end: $value;
  }
  
  .u_p-bottom__#{$size} {
    padding-block-end: $value;
  }
  
  .u_p-left__#{$size} {
    padding-inline-start: $value;
  }
  
  .u_p-block__#{$size} {
    padding-block: $value;
  }
  
  .u_p-inline__#{$size} {
    padding-inline: $value;
  }
}
