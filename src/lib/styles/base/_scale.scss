@use 'sass:math';
@use 'sass:map';
@use '../base/global-variables' as globals;

/* ==========================================================================
 Golden Ratio (Phi) Configuration
 ========================================================================== */

//-- Core Phi Value --//

$SCALE: math.div(1 + math.sqrt(5), 2) !default; // ϕ ≈ 1.618

$PRECISION: 3 !default; // Default decimal precision for rounding

//-- Major Proportions (Based on powers of Phi) --//

$MAJOR: math.pow($SCALE, 1); // ϕ^1

$MAJOR-HALF: math.pow($SCALE, 0.5); // √ϕ (ϕ^0.5)

$MAJOR-QUARTER: math.pow($SCALE, 0.25); // ϕ^1/4

$MAJOR-EIGHT: math.pow($SCALE, 0.125); // ϕ^1/8

//-- Minor Proportions (Derived from Major Proportions) --//

// Represents the relationship where 1/ϕ = ϕ - 1

$MINOR: $MAJOR - 1; // ϕ - 1 (or 1/ϕ)

$MINOR-HALF: $MAJOR-HALF - 1; // √ϕ - 1

$MINOR-QUARTER: $MAJOR-QUARTER - 1; // ϕ^1/4 - 1

$MINOR-EIGHT: $MAJOR-EIGHT - 1; // ϕ^1/8 - 1

/* ==========================================================================
 Golden Ratio Size Scale (Based on em units) - Optimized
 ========================================================================== */

// Uses powers of Phi to create a harmonious size scale relative to the base font size (1em).

// Defines a map of size names to their corresponding power of Phi.

$_size-scale-powers: (
  '4xs': -5,
  '3xs': -4,
  '2xs': -3,
  'xs': -2,
  'sm': -1,
  'md': 0,
  // Base size (Phi^0 = 1)
  'lg': 1,
  'xl': 2,
  '2xl': 3,
  '3xl': 4,
  '4xl': 5,
);


/* ==========================================================================
 Utility Functions
 ========================================================================== */

/**
 * Rounds a number to a specified number of decimal places.
 *
 * @param {Number} $number - The number to round.
 * @param {Number} $n-digits [$PRECISION] - The number of decimal places to round to.
 *
 * @return {Number} The rounded number.
 *
 * @error If $number is not a number.
 * @error If $n-digits is negative.
 */
@function round-to($number, $n-digits: $PRECISION) {

  //-- Input Validation --//
  @if type-of($number) != number {
    @error '`#{$number}` is not a number for the round-to function.';
  }

  @if type-of($n-digits) != number {
    @error '`#{$n-digits}` is not a number for the round-to function.';
  } @else if $n-digits < 0 {
    @error 'Negative precision `#{$n-digits}` is not allowed for the round-to function.';
  }

  //-- Rounding Logic --//
  @if $n-digits == 0 {

    // Use Sass's built-in round function for integer rounding
    @return math.round($number);
  }

  // Calculate the factor using math.pow for conciseness

  $factor: math.pow(10, $n-digits);

  // Multiply, round to nearest integer, then divide back
  @return math.div(math.round($number * $factor), $factor);
}

// Exported size map and accessor for use in other modules

$primitives: (
  '4xs': round-to(1em * math.pow($SCALE, -5)),
  '3xs': round-to(1em * math.pow($SCALE, -4)),
  '2xs': round-to(1em * math.pow($SCALE, -3)),
  'xs': round-to(1em * math.pow($SCALE, -2)),
  'sm': round-to(1em * math.pow($SCALE, -1)),
  'md': round-to(1em * math.pow($SCALE, 0)),
  'lg': round-to(1em * math.pow($SCALE, 1)),
  'xl': round-to(1em * math.pow($SCALE, 2)),
  '2xl': round-to(1em * math.pow($SCALE, 3)),
  '3xl': round-to(1em * math.pow($SCALE, 4)),
  '4xl': round-to(1em * math.pow($SCALE, 5)),
);

@function size($key) {
  @return map.get($primitives, $key);
}

// Dynamically generate size variables using the map.

@each $name, $value in $primitives {



  :root {
    --spacing-#{$name}: #{$value};
    --size-#{$name}: #{$value};
  }

}
