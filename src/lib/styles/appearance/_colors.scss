/* ==========================================================================
   Adaptive Theme Generator – single‑seed + explicit NEUTRAL family
   Follows https://www.chainlift.io/liftkitdocs/color
   --------------------------------------------------------------------------
   HOW TO USE
   1. Set the two seeds below:
      • $primary-seed   – your brand / accent colour.
      • $neutral-seed   – your grey (background) anchor.
   2. Compile – all semantic colours (secondary, tertiary, etc.) are derived
      automatically. Utility classes are generated for text and backgrounds.
   ========================================================================== */

@use 'sass:map';
@use 'sass:math';
@use 'sass:string';

/* ---------------------------------------------------------------------------
   0) Seed values
   --------------------------------------------------------------------------- */

$primary-seed : '72.3% 0.219 149.579'; // brand colour – change me
$neutral-seed : '85%   0.02  0';       // light grey (≈ surface)

/* ---------------------------------------------------------------------------
   1) Helper – shift hue while keeping L & C
   --------------------------------------------------------------------------- */
@function _shift-hue($lch-string, $delta) {
  $parts: string.split($lch-string, ' ');
  $l:     nth($parts, 1);
  $c:     nth($parts, 2);
  $h:     nth($parts, 3);
  @return '#{$l} #{$c} calc(#{$h} + #{$delta})';
}

/* ---------------------------------------------------------------------------
   2) Semantic seeds
   --------------------------------------------------------------------------- */
$semantic-seeds: (
  primary:   $primary-seed,
  secondary: _shift-hue($primary-seed,  30),  // +30°
  tertiary:  _shift-hue($primary-seed, -30),  // −30°
  neutral:   $neutral-seed,
  error:     _shift-hue($primary-seed, 180),  // complementary
  warning:   _shift-hue($primary-seed,  90),  // yellowish
  info:      _shift-hue($primary-seed, -90),  // bluish
  success:   _shift-hue($primary-seed, 120),  // greenish
);

/* ---------------------------------------------------------------------------
   3) Surface/background anchors
   --------------------------------------------------------------------------- */
$surface-seeds: (
  surface-light: '99% 0 0',
  surface-dark:  '19.5% 0 0',
);

/* ---------------------------------------------------------------------------
   4) Tonal-scale settings
   --------------------------------------------------------------------------- */
$steps: 11; // must be odd
$positions: (
  on-light:         1,
  variant-light:    ($steps - 1) / 2 - 2,
  container-light:  ($steps - 1) / 2 - 1,
  light:            ($steps - 1) / 2 + 1,
  dark:             ($steps - 1) / 2 + 2,
  variant-dark:     ($steps - 1) / 2 + 3,
  container-dark:   ($steps - 1) / 2 + 4,
  on-dark:          $steps,
);

/* ---------------------------------------------------------------------------
   5) Helpers for building OKLCH scales
   --------------------------------------------------------------------------- */
@function oklch-seed($name) {
  @return unquote('oklch(var(--seed-#{$name}))');
}

@function tonal-scale($name, $n: $steps) {
  $scale: ();
  $half: math.floor(($n - 1) / 2);
  $white: oklch(100% 0 0deg);
  $black: oklch(0%   0 0deg);
  $col: null; // Initialize $col variable to ensure it's always defined

  @for $i from 0 through $n - 1 {
    @if $i < $half {
      $pct: ($i / $half) * 100%;
      $col: unquote('color-mix(in oklch, #{oklch-seed($name)} #{$pct}, #{$white})');
    } @else if $i == $half {
      $col: oklch-seed($name);
    } @else {
      $pct: (($i - $half) / $half) * 100%;
      $col: unquote('color-mix(in oklch, #{$black} #{$pct}, #{oklch-seed($name)})');
    }
    $scale: append($scale, $col, comma);
  }

  @return $scale;
}

/* Build tonal scales for every semantic seed */
$scales: ();
@each $name in map-keys($semantic-seeds) {
  $scales: map-merge($scales, ($name: tonal-scale($name)));
}

/* ==========================================================================
   6) Palette generation in :root
   ========================================================================== */
:root {
  color-scheme: light dark;

  // 6-1: emit seed variables
  @each $name, $val in $semantic-seeds {
    --seed-#{$name}: #{$val};
  }
  @each $name, $val in $surface-seeds {
    --seed-#{$name}: #{$val};
  }

  // 6-2: semantic tokens via native light-dark()
  @each $name in map-keys($semantic-seeds) {
    $scale: map-get($scales, $name);

    --#{$name}: light-dark(
      nth($scale, map-get($positions, light)),
      nth($scale, map-get($positions, dark))
    );

    --#{$name}-container: light-dark(
      nth($scale, map-get($positions, container-light)),
      nth($scale, map-get($positions, container-dark))
    );

    --#{$name}-variant: light-dark(
      nth($scale, map-get($positions, variant-light)),
      nth($scale, map-get($positions, variant-dark))
    );

    --on-#{$name}: light-dark(
      nth($scale, map-get($positions, on-dark)),
      nth($scale, map-get($positions, on-light))
    );

    --on-#{$name}-container: light-dark(
      nth($scale, map-get($positions, on-dark)),
      nth($scale, map-get($positions, on-light))
    );
  }

  // 6-3: surface + background tokens
  --surface-light: oklch(var(--seed-surface-light));
  --surface-dark:  oklch(var(--seed-surface-dark));
  --surface:       light-dark(var(--surface-light), var(--surface-dark));
  --background:    var(--surface);
  --on-surface:    light-dark(
                     color-contrast(var(--surface-dark) vs oklch(100% 0 0) to AA, oklch(0% 0 0) to AA),
                     color-contrast(var(--surface-light) vs oklch(0% 0 0) to AA, oklch(100% 0 0) to AA)
                   );
}

/* ==========================================================================
   7) Utility classes
   ========================================================================== */
/* 7-1 Text colour helpers */
@each $name in map-keys($semantic-seeds) {
  .text--#{$name} {
    color: var(--#{$name});
  }
  .text--on-#{$name} {
    color: var(--on-#{$name});
  }
  .text--on-#{$name}-container {
    color: var(--on-#{$name}-container);
  }
}

/* 7-2 Background + auto-contrast */
@each $name in map-keys($semantic-seeds) {
  .bg--#{$name} {
    background-color: var(--#{$name});
    color:            var(--on-#{$name});
  }
  .bg--#{$name}-container {
    background-color: var(--#{$name}-container);
    color:            var(--on-#{$name}-container);
  }
  .bg--#{$name}-variant {
    background-color: var(--#{$name}-variant);
    color:            var(--on-#{$name}-container);
  }
}

/* 7-3 Surface/background utilities */
.text--surface {
  color: var(--on-surface);
}
.bg--surface {
  background-color: var(--surface);
  color:            var(--on-surface);
}
.bg--background {
  background-color: var(--background);
  color:            var(--on-surface);
}

/* 7-4 Focus visible states */
@mixin focus-ring($color: var(--secondary), $width: 2px) {
  outline: $width solid $color;
  outline-offset: 2px;
}

.focus-ring {
  &:focus-visible {
    @include focus-ring;
  }
}

.focus-ring--primary:focus-visible {
  @include focus-ring(var(--primary));
}

.focus-ring--secondary:focus-visible {
  @include focus-ring(var(--secondary));
}

.focus-ring--tertiary:focus-visible {
  @include focus-ring(var(--tertiary));
}
