@use 'sass:map';

@use 'sass:math';



/* ==========================================================================

   1) Seed tuples

   ========================================================================== */

$primary-seed-lch: (72.3% 0.219 149.579deg);
$neutral-seed-lch: (55.6% 0 0deg);



/* ==========================================================================

   2) Hue-shift helper

   ========================================================================== */

@function shift-hue($lch, $delta) {

  $L: nth($lch, 1);

  $C: nth($lch, 2);

  $H: nth($lch, 3);

  @return "#{ $L } #{ $C } #{ ($H + $delta) }";

}


/* ==========================================================================

   2.1) Color transformation functions

   ========================================================================== */

@function create-secondary($primary-lch) {
  // For oklch(52.7% 0.154 150.069) from primary oklch(72.3% 0.219 149.579deg)
  $L: nth($primary-lch, 1) * 0.729; // 72.3% → 52.7%
  $C: nth($primary-lch, 2) * 0.703; // 0.219 → 0.154
  $H: nth($primary-lch, 3) + 0.49deg; // 149.579deg → 150.069deg
  
  @return "#{ $L } #{ $C } #{ $H }";
}

@function create-tertiary($primary-lch) {
  // For oklch(39.3% 0.095 152.535) from primary oklch(72.3% 0.219 149.579deg)
  $L: nth($primary-lch, 1) * 0.544; // 72.3% → 39.3%
  $C: nth($primary-lch, 2) * 0.434; // 0.219 → 0.095
  $H: nth($primary-lch, 3) + 2.956deg; // 149.579deg → 152.535deg
  
  @return "#{ $L } #{ $C } #{ $H }";
}


/* ==========================================================================

   3) Semantic seeds

   ========================================================================== */

$semantic-seeds: (

  primary:   "#{nth($primary-seed-lch,1)} #{nth($primary-seed-lch,2)} #{nth($primary-seed-lch,3)}",

  secondary: create-secondary($primary-seed-lch),

  tertiary:  create-tertiary($primary-seed-lch),

  neutral:   "#{nth($neutral-seed-lch,1)} #{nth($neutral-seed-lch,2)} #{nth($neutral-seed-lch,3)}",

  error:     shift-hue($primary-seed-lch, 180deg),

  warning:   shift-hue($primary-seed-lch,  50deg  - nth($primary-seed-lch,3)),

  info:      shift-hue($primary-seed-lch, 230deg  - nth($primary-seed-lch,3)),

  success:   shift-hue($primary-seed-lch, 130deg  - nth($primary-seed-lch,3))

);



/* ==========================================================================

   4) Surface seeds

   ========================================================================== */

$surface-seeds: (

  surface-light: "99% 0 0",

  surface-dark:  "19.5% 0 0"

);



/* ==========================================================================

   5) Tonal-scale generator

   ========================================================================== */

@function tonal-scale($name, $steps: 11) {

  $scale: ();

  $col:   null;  

  $half:  math.floor(($steps - 1) / 2);



  @for $i from 0 through $steps - 1 {

    @if $i < $half {

      $pct: ($i / $half) * 100%;

      $col: color-mix(in oklch, var(--seed-#{$name}) #{$pct}, oklch(100% 0 0));

    } @else if $i == $half {

      $col: var(--seed-#{$name});

    } @else {

      $pct: (($i - $half) / $half) * 100%;

      $col: color-mix(in oklch, oklch(0% 0 0) #{$pct}, var(--seed-#{$name}));

    }

    $scale: append($scale, $col, comma);

  }



  @return $scale;

}



/* ==========================================================================

   6) Build all scales

   ========================================================================== */

$scales: ();

@each $name in map.keys(map.merge($semantic-seeds, $surface-seeds)) {

  $scales: map.merge($scales, ($name: tonal-scale($name)));

}



/* ==========================================================================

   7) Tone positions

   ========================================================================== */

$positions: (light: 8, dark: 6);



/* ==========================================================================

   8) Emit CSS variables

   ========================================================================== */

:root {

  color-scheme: light dark;



  /* 8.1 Seeds */

  @each $name, $tpl in $semantic-seeds {

    --seed-#{$name}: oklch(#{$tpl});

  }

  @each $name, $tpl in $surface-seeds {

    --seed-#{$name}: oklch(#{$tpl});

  }



  /* 8.2 Semantic tokens (light) */

  @each $name in map.keys($semantic-seeds) {

    $scale: map.get($scales, $name);

    --#{$name}:                  #{nth($scale, map.get($positions, light))};

    --#{$name}-variant:          #{nth($scale, map.get($positions, light) - 2)};

    --#{$name}-container:        #{nth($scale, map.get($positions, light) - 1)};

    --#{$name}-container-lowest: #{nth($scale, map.get($positions, light) - 4)};

    --#{$name}-container-low:    #{nth($scale, map.get($positions, light) - 3)};

    --#{$name}-container-high:   #{nth($scale, map.get($positions, light) + 1)};

    --on-#{$name}:               #{nth($scale, map.get($positions, dark))};

    --on-#{$name}-container:     #{nth($scale, map.get($positions, dark))};

  }



  /* 8.3 Surface & background */

  --surface-light: var(--seed-surface-light);

  --surface-dark:  var(--seed-surface-dark);

  --surface:       var(--surface-light);

  --background:    var(--surface);

  --on-surface:    color-contrast(var(--surface-light) vs oklch(0% 0 0) to AA, oklch(100% 0 0) to AA);

  /* Add explicit typography color variables */
  --on-surface-container: color-contrast(var(--neutral-container) vs oklch(0% 0 0) to AA, oklch(100% 0 0) to AA);
  --on-surface-container-high: color-contrast(var(--neutral-container-high) vs oklch(0% 0 0) to AA, oklch(100% 0 0) to AA);

}


@media (prefers-color-scheme: dark) {

  :root {

    /* 8.4 Dark-mode roles */

    @each $name in map.keys($semantic-seeds) {

      $scale: map.get($scales, $name);

      --#{$name}:                   #{nth($scale, map.get($positions, dark))};

      --#{$name}-variant:           #{nth($scale, map.get($positions, dark) - 2)};

      --#{$name}-container:         #{nth($scale, map.get($positions, dark) - 1)};

      --#{$name}-container-lowest:  #{nth($scale, (map.get($positions, dark) + 2))};    

      --#{$name}-container-low:     #{nth($scale, (map.get($positions, dark) + 1))};

      --#{$name}-container-high:    #{nth($scale, (map.get($positions, dark) - 1))};

      --on-#{$name}:                #{nth($scale, map.get($positions, light))};

      --on-#{$name}-container:      #{nth($scale, map.get($positions, light))};

    }



    --surface:     var(--surface-dark);

    --background:  var(--surface);

    --on-surface:  color-contrast(var(--surface-dark) vs oklch(100% 0 0) to AA, oklch(0% 0 0) to AA);

    /* Add explicit typography color variables for dark mode */
    --on-surface-container: color-contrast(var(--neutral-container) vs oklch(100% 0 0) to AA, oklch(0% 0 0) to AA);
    --on-surface-container-high: color-contrast(var(--neutral-container-high) vs oklch(100% 0 0) to AA, oklch(0% 0 0) to AA);
  }

}



/* ==========================================================================

   9) Utility classes

   ========================================================================== */

/* 9.1 Text colors */

@each $name in map.keys($semantic-seeds) {

  .text--#{$name} {

    color: var(--#{$name});

  }

  .text--on-#{$name} {

    /* Dynamic contrast that meets AA by default */

    color: color-contrast(

      var(--#{$name})

      vs oklch(0% 0 0)    to AA,

         oklch(100% 0 0)  to AA

    );

  }

  .text--on-#{$name}-container {

    color: color-contrast(

      var(--#{$name}-container)

      vs oklch(0% 0 0)    to AA,

         oklch(100% 0 0)  to AA

    );

  }

}



/* 9.2 Background colors */

@each $name in map.keys($semantic-seeds) {

  .bg--#{$name} {

    background-color: var(--#{$name});

    color:            color-contrast(

                        var(--#{$name})

                        vs oklch(0% 0 0)    to AA,

                           oklch(100% 0 0)  to AA

                      );

  }

  .bg--#{$name}-container {

    background-color: var(--#{$name}-container);

    color:            color-contrast(

                        var(--#{$name}-container)

                        vs oklch(0% 0 0)    to AA,

                           oklch(100% 0 0)  to AA

                      );

  }

  .bg--#{$name}-variant {

    background-color: var(--#{$name}-variant);

    color:            color-contrast(

                        var(--#{$name}-variant)

                        vs oklch(0% 0 0)    to AA,

                           oklch(100% 0 0)  to AA

                      );

  }

}



/* 9.3 Surface utilities */

.text--surface {

  color: color-contrast(

    var(--surface)

    vs oklch(0% 0 0)    to AA,

       oklch(100% 0 0)  to AA

  );

}

.bg--surface {

  background-color: var(--surface);

  color:            color-contrast(

                      var(--surface)

                      vs oklch(0% 0 0)    to AA,

                         oklch(100% 0 0)  to AA

                    );

}

.bg--background {

  background-color: var(--background);

  color:            color-contrast(

                      var(--background)

                      vs oklch(0% 0 0)    to AA,

                         oklch(100% 0 0)  to AA

                    );

}



/* 9.4 Focus-ring mixins & classes */

@mixin focus-ring($clr: var(--secondary), $w: 2px) {

  outline:        $w solid $clr;

  outline-offset: 2px;

}

.focus-ring:focus-visible            { @include focus-ring; }

.focus-ring--primary:focus-visible   { @include focus-ring(var(--primary)); }

.focus-ring--secondary:focus-visible { @include focus-ring(var(--secondary)); }

.focus-ring--tertiary:focus-visible  { @include focus-ring(var(--tertiary)); }


%typography--primary{
  color: light-dark(
    oklch(20% 0 0),
    oklch(90% 0 0)
  );
}

.typography--primary {
  @extend %typography--primary;
}

%typography--secondary{
  color: light-dark(
    oklch(35% 0 0),
    oklch(75% 0 0)
  );
}

.typography--secondary {
  @extend %typography--secondary;
}

%typography--tertiary{
  color: light-dark(
    oklch(50% 0 0),
    oklch(60% 0 0)
  );
}

.typography--tertiary {
  @extend %typography--tertiary;
}
