@use "sass:math"; // Required for math.abs()

// --- Parallax Utility Mixins ---

/**
 * Creates the main scrolling container with perspective.
 * Apply this to the element that will contain the scrollable parallax content.
 *
 * @param $perspective-value - The perspective depth (e.g., 10px, 1px). Crucial for the 3D effect.
 * @param $height - The height of the scroll container (defaults to 100vh).
 * @param $overflow-y - Vertical overflow behavior (defaults to auto for scrolling).
 * @param $overflow-x - Horizontal overflow behavior (defaults to hidden).
 */
@mixin parallax-scroll-container($perspective-value, $height: 100vh, $overflow-y: auto, $overflow-x: hidden) {
  height: $height;
  overflow-y: $overflow-y;
  overflow-x: $overflow-x;
  perspective: $perspective-value;
  // Optional: Improves scrolling performance on touch devices
  // -webkit-overflow-scrolling: touch;
}

/**
 * Sets up the container that holds the actual parallax items.
 * This element establishes the 3D rendering context.
 * Apply this to the direct child of the scroll container which holds the layers.
 *
 * @param $height - The height of this viewport (defaults to 100% of its parent). Use vh units if it should fill the screen initially.
 * @param $position - Positioning context (defaults to relative).
 * @param $z-index - Stacking order relative to *sibling* elements (defaults to -1 to appear behind subsequent content).
 */
@mixin parallax-viewport($height: 100%, $position: relative, $z-index: -1) {
  position: $position;
  height: $height;
  transform-style: preserve-3d; // Essential: Enables 3D positioning for children
  z-index: $z-index; // Places this entire section behind sibling elements that follow it
}

/**
 * Applies the parallax effect (translation and scaling) to an individual layer.
 * Apply this to elements *inside* the parallax-viewport element.
 *
 * @param $distance - How far back on the Z-axis (negative value like -10px). Controls speed.
 * @param $perspective - The perspective value set on the ancestor scroll container (must match!).
 * @param $z-index - Stacking order relative to *other items within the same viewport* (defaults to -1).
 * @param $object-fit - How the element (e.g., image) should fit its container (defaults to cover).
 */
@mixin parallax-item($distance, $perspective, $z-index: -1, $object-fit: cover) {
  // Absolute positioning within the parallax-viewport
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  height: 100%;
  width: 100%;
  object-fit: $object-fit;
  z-index: $z-index; // Stacking order within the viewport

  // Calculate scale factor to counteract perspective shrinking
  $scale-factor: 1;
  @if $perspective != 0 {
    // Basic check for compatible units needed for calculation
    @if unit($distance) == unit($perspective) or unitless($distance) == true or unitless($perspective) == true {
       // Formula: scale = 1 + (abs(distance) / perspective)
       $scale-factor: 1 + (math.abs($distance) / $perspective);
    } @else {
       @warn "parallax-item: Incompatible units for distance (#{$distance}) and perspective (#{$perspective}). Scaling might be incorrect.";
    }
  } @else {
    @warn "parallax-item: Perspective cannot be zero for calculation.";
  }

  // Apply the 3D transform
  transform: translateZ($distance) scale($scale-factor);
}

// --- Example Usage in an Existing SCSS File ---

/*
// Assuming you have existing HTML like:
<div class="site-wrapper"> // Element to become the scroll container
  <section class="hero"> // Element to become the parallax viewport
    <div class="hero__background"></div> // Parallax item 1
    <div class="hero__foreground"></div> // Parallax item 2
    <h1 class="hero__title">Welcome</h1> // Content within viewport
  </section>
  <main class="page-content"> // Content after the parallax section
    <p>Regular content...</p>
  </main>
</div>
*/

// Applying the mixins to existing selectors:

.site-wrapper {
  // Make this the scroll container with 10px perspective
  @include parallax-scroll-container(10px);
}

.heroexample {
  // Make this the viewport holding parallax items, fill the screen height initially
  @include parallax-viewport(100vh);


}

.hero__backgroundexample {
  // Make this the furthest back parallax item
  @include parallax-item(
    $distance: -20px, // Further away = slower scroll
    $perspective: 10px // MUST match the perspective from .site-wrapper
  );

}

.hero__foreground {
  // Make this a closer parallax item
  @include parallax-item(
    $distance: -5px, // Closer = faster scroll
    $perspective: 10px, // MUST match the perspective from .site-wrapper
    $z-index: 0 // Make it appear above the background within the hero section
  );

}

