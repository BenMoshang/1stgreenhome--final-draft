// styles/components/_buttons.scss

// --------------------------------------------------------------

// Button Component

// --------------------------------------------------------------

/**
 * Accessible, themeable button with variants and icon support.
 * - Supports fill & outline modes
 * - Configurable sizes via modifiers
 * - Icon padding helpers
 * - Uses golden ratio pacing for vertical/horizontal spacing
 * Usage: <button class="button button--fill button--large button--start-icon">...
 */

@use 'sass:math';
@use '../base/globals';
@use '../appearance/colors';
@use '../base/scale';

// Golden ratio split (√φ) for vertical spacing

$btn-ratio: globals.round-to(globals.$MAJOR-HALF);

// Button size configurations: name => ( font, pad-vert, pad-horiz )

$btn-sizes: (
  md: (
    font: globals.size('md'),
    pv: globals.size('sm'),
    ph: globals.size('md'),
  ),
  lg: (
    font: globals.round-to(globals.size('md') * globals.$MAJOR-QUARTER),
    pv: globals.size('md'),
    ph: globals.size('lg'),
  ),
);

// Icon padding map: pos => ( left-key, right-key )

$btn-icon-map: (
  start: (
    'sm',
    'md',
  ),
  end: (
    'md',
    'sm',
  ),
);

// Mixin: apply size config
@mixin btn-size($key) {

  $cfg: map-get($btn-sizes, $key);
  $pv: map-get($cfg, pv);
  $ph: map-get($cfg, ph);

  padding: globals.round-to(math.div($pv, globals.$MAJOR-HALF)) globals.round-to($ph);
  font-size: globals.round-to(map-get($cfg, font));
}

// Mixin: icon padding helper
@mixin btn-icon($pos) {

  $cfg: map-get($btn-icon-map, $pos);

  padding-inline: globals.round-to(globals.size(nth($cfg, 1))) globals.round-to(globals.size(nth($cfg, 2)));
}

.button {

  // Base appearance
  color: var(--primary);

  position: relative;
  display: inline-flex;
  overflow: hidden;
  align-items: center;
  justify-content: center;
  border: 1px solid transparent;
  border-radius: 9999px;
  background-color: transparent;
  cursor: pointer;
  text-decoration: none;
  touch-action: manipulation;

  // Default size
  @include btn-size(md);

  // Variants
  &--fill {
    background-color: var(--primary);
    color: var(--on-primary);
  }

  &--outline {
    color: var(--primary);

    border-color: var(--outline);
  }

  // Icon modifiers
  @each $pos in map-keys($btn-icon-map) {
    &--#{$pos}-icon {
      @include btn-icon($pos);
    }
  }

  // Size modifiers
  @each $size in map-keys($btn-sizes) {
    &--#{$size} {
      @include btn-size($size);
    }
  }
}

// Content and icon wrappers
.button__content,
.button__icon {
  display: inline-flex;
  align-items: center;
  justify-content: center;
}
