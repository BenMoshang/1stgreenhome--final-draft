---
description: 
globs: 
alwaysApply: true
---
---
name: chainlift-liftkit-css-usage.mdc
description: Guidelines and best practices for using the Chainlift Liftkit CSS utility library.
globs: **/*.{svelte,html,jsx,tsx,vue,astro,php,cshtml,erb} # Adjust globs based on your project's templating/component files
alwaysApply: true # Apply these guidelines whenever relevant files are involved
---

**Core Principle: Documentation is the Source of Truth**

* **CRUCIAL:** The definitive resource for using Chainlift Liftkit CSS is the official documentation: **https://www.chainlift.io/liftkitdocs**
* Before applying any Chainlift class or attempting a styling task, **always consult the documentation** to find the correct utility class, understand its syntax, effects, and any available modifiers (responsive, state, etc.).

**Resolving Uncertainty (How to Find the Right Class):**

* **If you are unsure how to implement a specific style or layout using Chainlift:**
    1.  **Identify the Goal:** Clearly define the styling needed (e.g., "make text bold," "add margin top," "center align items in a container," "change background on hover").
    2.  **Navigate the Documentation:** Go to **https://www.chainlift.io/liftkitdocs**.
    3.  **Explore Relevant Sections ("Routes"):** Systematically browse the documentation sections related to your goal. Examples:
        * For **text styling** (font size, weight, color, alignment): Go through the **Typography** section.
        * For **layout** (display, position, flexbox, grid): Explore **Layout**, **Flexbox**, **Grid** sections.
        * For **spacing** (padding, margin): Check the **Spacing** section.
        * For **sizing** (width, height): Check the **Sizing** section.
        * For **colors** (text, background, border): Refer to **Colors**, **Backgrounds**, **Borders**.
        * For **borders** (width, style, radius): Check the **Borders** section.
        * For **effects** (shadows, opacity): Look in the **Effects** section.
        * For **responsiveness** or **states** (hover, focus): Find documentation on **Responsive Design** (e.g., `md:`, `lg:`) and **State Variants** (e.g., `hover:`, `focus:`).
    4.  **Locate the Utility:** Find the specific utility class(es) and syntax required. Note any necessary prefixes or modifiers.
    5.  **Apply the Class:** Use the correctly identified class(es) from the documentation in your code.

**Usage Guidelines & Best Practices:**

1.  **Apply Utility Classes Directly:** Use Chainlift's utility classes within your HTML/template markup.
    * Example: `<div class="p-4 md:p-8 bg-primary hover:bg-secondary text-white rounded">...</div>`
2.  **Combine Utilities:** Build complex styles by composing multiple utility classes on a single element rather than writing custom CSS.
3.  **Use Documentation for Syntax:** Adhere strictly to the class names, prefixes, modifiers (responsive, state), and value notations shown in the official documentation. **Do not invent class names.**
4.  **Prefer Utilities Over Custom CSS:** Implement styling using available Chainlift utilities whenever possible. Only write custom CSS for styles that cannot be achieved with the library's utilities or project configuration.
5.  **Understand Base Styles (Preflight):** Be aware that Chainlift might include base styles or resets. Check the "Getting Started" or "Core Concepts" sections of the docs.
6.  **Check Project Configuration:** If the project has a custom Chainlift theme or configuration (e.g., `chainlift.config.js`), consult it for custom values (colors, spacing) *in addition* to the main documentation, but always verify the utility class structure in the official docs.
7.  **Dynamic Classes:** When applying classes dynamically (e.g., via JavaScript or framework bindings), ensure the resulting class strings perfectly match valid Chainlift utility classes from the documentation.

**Key Conventions Summary:**

* **Docs First:** Always start with the official Chainlift documentation (`https://www.chainlift.io/liftkitdocs`).
* **Apply Directly:** Add utility classes to HTML/template elements.
* **Compose:** Combine multiple utilities for complex styles.
* **Use Exact Syntax:** Copy class names and modifiers precisely from the docs.
* **Don't Invent:** Only use documented classes.
* **Prioritize Utilities:** Avoid custom CSS when a utility exists.